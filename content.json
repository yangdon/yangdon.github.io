{"meta":{"title":"YANGDON's Blog","subtitle":null,"description":null,"author":"Yang Don","url":"https://yangdon.github.io"},"pages":[{"title":"","date":"2017-03-16T07:54:28.989Z","updated":"2017-03-16T07:54:28.989Z","comments":true,"path":"404.html","permalink":"https://yangdon.github.io/404.html","excerpt":"","text":"404 Oops! You're lost. We can not find the page you're looking for. Return home or try the search bar below."},{"title":"Contact","date":"2015-11-29T13:00:03.000Z","updated":"2017-03-16T07:54:28.989Z","comments":true,"path":"contact/index.html","permalink":"https://yangdon.github.io/contact/index.html","excerpt":"","text":"Let us help Lorem ipsum sdolor sic amit, bolero carles. Name Email Message Send Cancel"},{"title":"Login","date":"2017-03-16T07:54:28.989Z","updated":"2017-03-16T07:54:28.989Z","comments":true,"path":"login/index.html","permalink":"https://yangdon.github.io/login/index.html","excerpt":"","text":"Email * Password * Forget Password? Login or login using: Important Information Duis autem vel eum iriure at dolor vulputate velit esse vel molestie at dolore. More details"},{"title":"About Us","date":"2015-11-16T17:00:51.000Z","updated":"2017-03-16T07:54:28.989Z","comments":true,"path":"about/index.html","permalink":"https://yangdon.github.io/about/index.html","excerpt":"","text":"Vero eos et accusamus At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi. Idest laborum et dolorum fuga. Et harum quidem rerum et quas molestias excepturi sint occaecati facilis est et expedita distinctio lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut non libero consectetur adipiscing elit magna. Sed et quam lacus. Officia deserunt molliti Consectetur adipiscing Deserunt fpicia Officia deserunt molliti Consectetur adipiscing Deserunt fpicia Excepturi sint occaecati cupiditate non provident Ducimus qui blanditiis praesentium voluptatum Ut non libero consectetur adipiscing elit magna Client Testimonials Denim you probably haven't heard of. Lorem ipsum dolor met consectetur adipisicing sit amet, consectetur adipisicing elit, of them jean shorts sed magna aliqua. Lorem ipsum dolor met consectetur adipisicing sit amet do eiusmod dolore. Lina Mars Commercial Director Raw denim you Mustache cliche tempor, williamsburg carles vegan helvetica probably haven't heard of them jean shorts austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Kate Ford Commercial Director Reprehenderit butcher stache cliche tempor, williamsburg carles vegan helvetica.retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Jake Witson Commercial Director Our Skills UI Design 90% Wordpress CMS 60% HTML/CSS &amp; JavaScript 75% Lina Doe Chief Executive Officer / CEO Donec id elit non mi porta gravida at eget metus. Fusce dapibus, justo sit amet risus etiam porta sem... Carles Puyol Chief Executive Officer / CEO Donec id elit non mi porta gravida at eget metus. Fusce dapibus, justo sit amet risus etiam porta sem... Andres Iniesta Chief Executive Officer / CEO Donec id elit non mi porta gravida at eget metus. Fusce dapibus, justo sit amet risus etiam porta sem... Jessica Alba Chief Executive Officer / CEO Donec id elit non mi porta gravida at eget metus. Fusce dapibus, justo sit amet risus etiam porta sem..."},{"title":"Projects","date":"2015-11-29T13:00:03.000Z","updated":"2017-03-16T07:54:28.989Z","comments":true,"path":"projects/index.html","permalink":"https://yangdon.github.io/projects/index.html","excerpt":"","text":"All UI Design Web Development Photography Wordpress and Logo Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back"}],"posts":[{"title":"redis--redis安装与配置","slug":"redis-redis安装与配置","date":"2017-11-01T13:49:42.000Z","updated":"2017-11-02T16:33:44.616Z","comments":true,"path":"2017/11/01/redis-redis安装与配置/","link":"","permalink":"https://yangdon.github.io/2017/11/01/redis-redis安装与配置/","excerpt":"redis–redis安装与配置一、redis安装获取redis最新的安装包： 1wget http://download.redis.io/releases/redis-x.x.x.tar.gz 开始安装： 1234tar -zxvf redis-x.x.x.tar.gzcd redis-x.x.xmakemake install 配置redis.config文件： 123sudo mkdir /etc/redissudo cp ./redis.config /etc/redis/6379.configsudo vim /etc/redis/6379.config","text":"redis–redis安装与配置一、redis安装获取redis最新的安装包： 1wget http://download.redis.io/releases/redis-x.x.x.tar.gz 开始安装： 1234tar -zxvf redis-x.x.x.tar.gzcd redis-x.x.xmakemake install 配置redis.config文件： 123sudo mkdir /etc/redissudo cp ./redis.config /etc/redis/6379.configsudo vim /etc/redis/6379.config 6379.config只需作如下内容的修改: 123456789# By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.daemonize yes # 将daemonize属性改为yes（表明需要在后台运行）(136行附近)# Note that you must specify a directory here, not a file name.dir /usr/local/redis/data # 设置dump.rdb文件的存储路径(263行附近)# requirepass foobaredrequirepass root123 # 设置redis的密码(500行附近) 添加dump.rdb文件的存储路径： 12sudo mkdir /usr/local/redis/datasudo chmod 766 -R /usr/local/redis/ 配置redis的启动参数: 123cd redis-x.x.xcd utilssudo cp ./redis_init_script /etc/init.d/redis_6379 并对redis_6379文件进行修改，具体内容作如下： 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/sh## Simple Redis init.d script conceived to work on Linux systems# as it does use of the /proc filesystem.REDISPORT=6379EXEC=/usr/local/bin/redis-serverCLIEXEC=/usr/local/bin/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=\"/etc/redis/$&#123;REDISPORT&#125;.conf\"case \"$1\" in start) if [ -f $PIDFILE ] then echo \"$PIDFILE exists, process is already running or crashed\" else echo \"Starting Redis server...\" $EXEC $CONF fi ;; stop) if [ ! -f $PIDFILE ] then echo \"$PIDFILE does not exist, process is not running\" else PID=$(cat $PIDFILE) echo \"Stopping ...\" $CLIEXEC -a \"root123\" -p $REDISPORT shutdown # 添加'-a \"root123\"' while [ -x /proc/$&#123;PID&#125; ] do echo \"Waiting for Redis to shutdown ...\" sleep 1 done echo \"Redis stopped\" fi ;; *) echo \"Please use start or stop as first argument\" ;;esac 至此，redis的安装与配置完成。 二、运行redis-server(后台服务)与redis-cli(客户端)运行redis-server： 12sudo service redis_6379 start # 启动redis后台服务sudo service redis_6379 stop # 停止redis后台服务 运行redis-cli(客户端): 1redis-cli -a root123 或者 12redis-cliauth root123","categories":[],"tags":[]},{"title":"java--jedis配置","slug":"java-jedis配置","date":"2017-11-01T13:03:05.000Z","updated":"2017-11-01T15:28:37.929Z","comments":true,"path":"2017/11/01/java-jedis配置/","link":"","permalink":"https://yangdon.github.io/2017/11/01/java-jedis配置/","excerpt":"","text":"java–jedis配置","categories":[],"tags":[{"name":"java jedis","slug":"java-jedis","permalink":"https://yangdon.github.io/tags/java-jedis/"}]},{"title":"mybatis--表高级映射","slug":"mybatis-表高级映射","date":"2017-10-30T11:51:03.000Z","updated":"2017-10-31T06:19:07.860Z","comments":true,"path":"2017/10/30/mybatis-表高级映射/","link":"","permalink":"https://yangdon.github.io/2017/10/30/mybatis-表高级映射/","excerpt":"","text":"mybatis–表高级映射一：订单商品数据模型1.商品表(items)：id，itemsname(商品名称)，price(商品定价)，detail(商品描述)，pic(商品图片)，createtime(生产日期)12345678910+------------+-------------+--------+-------+-----------+----------------+| Field | Type | Null | Key | Default | Extra ||------------+-------------+--------+-------+-----------+----------------|| id | int(11) | NO | PRI | &lt;null&gt; | auto_increment || itemsname | varchar(32) | NO | | &lt;null&gt; | || price | float(10,1) | NO | | &lt;null&gt; | || detail | text | YES | | &lt;null&gt; | || pic | varchar(64) | YES | | &lt;null&gt; | || createtime | datetime | NO | | &lt;null&gt; | |+------------+-------------+--------+-------+-----------+----------------+ 2.用户表(t_user)：id,username(用户名称),birthday(生日),sex(性别),address(地址)123456789+----------+--------------+--------+-------+-----------+----------------+| Field | Type | Null | Key | Default | Extra ||----------+--------------+--------+-------+-----------+----------------|| id | int(11) | NO | PRI | &lt;null&gt; | auto_increment || username | varchar(32) | NO | | &lt;null&gt; | || birthday | date | YES | | &lt;null&gt; | || sex | char(1) | YES | | &lt;null&gt; | || address | varchar(256) | YES | | &lt;null&gt; | |+----------+--------------+--------+-------+-----------+----------------+ 3.订单表(orders)：id，user_id(下单用户id)，number(订单号)，createtime(创建订单时间)，note(备注)123456789+------------+--------------+--------+-------+-----------+----------------+| Field | Type | Null | Key | Default | Extra ||------------+--------------+--------+-------+-----------+----------------|| id | int(11) | NO | PRI | &lt;null&gt; | auto_increment || user_id | int(11) | NO | MUL | &lt;null&gt; | || number | varchar(30) | NO | | &lt;null&gt; | || createtime | datetime | NO | | &lt;null&gt; | || note | varchar(100) | YES | | &lt;null&gt; | |+------------+--------------+--------+-------+-----------+----------------+ 4.订单详情表(orderdetail)：id,orders_id(订单id),items_id(商品id),items_num(商品购买数量)12345678+-----------+---------+--------+-------+-----------+----------------+| Field | Type | Null | Key | Default | Extra ||-----------+---------+--------+-------+-----------+----------------|| id | int(11) | NO | PRI | &lt;null&gt; | auto_increment || orders_id | int(11) | NO | MUL | &lt;null&gt; | || items_id | int(11) | NO | MUL | &lt;null&gt; | || items_num | int(11) | YES | | &lt;null&gt; | |+-----------+---------+--------+-------+-----------+----------------+","categories":[],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://yangdon.github.io/tags/mybatis/"}]},{"title":"redis--基础语法","slug":"redis-基础语法","date":"2017-10-30T02:39:27.000Z","updated":"2017-10-30T11:48:35.843Z","comments":true,"path":"2017/10/30/redis-基础语法/","link":"","permalink":"https://yangdon.github.io/2017/10/30/redis-基础语法/","excerpt":"","text":"redis 基础语法redis 键(key)DEL命令用于删除已存在的键。","categories":[],"tags":[]},{"title":"前端--grunt自动化构建","slug":"前端-grunt自动化构建","date":"2017-10-28T13:07:22.000Z","updated":"2017-11-02T16:32:04.203Z","comments":true,"path":"2017/10/28/前端-grunt自动化构建/","link":"","permalink":"https://yangdon.github.io/2017/10/28/前端-grunt自动化构建/","excerpt":"GRUNT – JavaScript 世界的构建工具为何要用构建工具？ 一句话：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。—-grunt官网 案例使用grunt自动构建HTML项目，将stylus转化为浏览器可识别的css代码，并且支持项目的热更新。 环境准备1.nodejs环境 2.npm管理工具","text":"GRUNT – JavaScript 世界的构建工具为何要用构建工具？ 一句话：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。—-grunt官网 案例使用grunt自动构建HTML项目，将stylus转化为浏览器可识别的css代码，并且支持项目的热更新。 环境准备1.nodejs环境 2.npm管理工具 安装12345678910mkdir my-projectcd my-projectnpm initnpm installnpm install -g grunt-clinpm install grunt --save-dev //安装Grunt最新版本到项目目录中npm install grunt-contrib-connect --save-dev //一个小型的服务器npm install grunt-contrib-stylus --save-dev //stylus编写styl输出cssnpm install grunt-contrib-watch --save-dev //监视文件变动，做出相应动作 至此，所需依赖安装完毕。 配置1.创建项目结构 在项目根目录创建 app 文件夹， 123456789app/├── fonts/├── images/├── index.html├── scripts/├── style/│ └── style.css└── stylus/ └── example.styl 2.配置Gruntfile.js文件 在项目根目录创建 Gruntfile.js 文件，其配置内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/// 包装函数module.exports = function(grunt) &#123; // 任务配置,所有插件的配置信息 grunt.initConfig(&#123; pkg: grunt.file.readJSON('package.json'), connect: &#123; options: &#123; port: 9000, hostname: '*', //默认就是这个值，可配置为本机某个 IP，localhost 或域名 livereload: 35729 //声明给 watch 监听的端口 &#125;, server: &#123; options: &#123; open: true, //自动打开网页 http:// base: [ 'app' //主目录 ] &#125; &#125; &#125;, stylus:&#123; compile: &#123; options: &#123; relativeDest: '/', //path to be joined and resolved with each file dest to get new one. urlfunc: 'data-uri', // use data-uri('test.png') in our code to trigger Data URI embedding linenos: false, compress: false &#125;, files: &#123; 'app/style/style.css': 'app/stylus/*.styl', // 1:1 compile &#125; &#125; &#125;, // watch插件的配置信息 watch: &#123; another: &#123; tasks: ['stylus'], options: &#123; livereload: '&lt;%=connect.options.livereload%&gt;' &#125;, files: [ //下面文件的改变就会实时刷新网页 'app/*.html', 'app/stylus/&#123;,*/&#125;*.styl', 'app/scripts/&#123;,*/&#125;*.js', 'app/images/&#123;,*/&#125;*.&#123;png,jpg&#125;', 'app/fonts/&#123;,*/&#125;*.*' ] &#125; &#125; &#125;); // 告诉grunt我们将使用插件 grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-contrib-stylus'); //建立本地服务器 grunt.loadNpmTasks('grunt-contrib-connect'); grunt.registerTask('serve', [ 'connect:server', 'watch' ]);&#125;; 3.启动项目在项目根目录输入命令： 1grunt serve 项目成功启动，修改项目文件，浏览器中显示的内容也会随之改变。 在app/stylus/文件夹下的所有*.styl文件的内容都将被编译到app/style/style.css文件中去。","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://yangdon.github.io/tags/前端/"}]},{"title":"JAVA设计模式-合成/聚合复用原则","slug":"JAVA设计模式-合成-聚合复用原则","date":"2017-10-15T07:15:39.000Z","updated":"2017-10-15T08:05:34.172Z","comments":true,"path":"2017/10/15/JAVA设计模式-合成-聚合复用原则/","link":"","permalink":"https://yangdon.github.io/2017/10/15/JAVA设计模式-合成-聚合复用原则/","excerpt":"","text":"JAVA设计模式-合成/聚合复用原则转自：http://blog.csdn.net/u010832572/article/details/45007933 一、什么是合成/聚合复用原则？合成/聚合复用原则是 在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的 委派 达到复用已有功能的目的。 简述为：要尽量使用合成/聚合，尽量不要使用继承。 二、合成和聚合的区别；依赖和关联合成(Composition)和聚合(Aggregation)都是关联(Association)的特殊种类。用C语言来讲，合成是 值的聚合(Aggregation by Value)，聚合是则是 引用的聚合(Aggregation by Reference)。","categories":[],"tags":[]},{"title":"JAVA-23种设计模式","slug":"JAVA-23种设计模式","date":"2017-10-15T06:34:27.000Z","updated":"2017-11-02T16:39:30.563Z","comments":true,"path":"2017/10/15/JAVA-23种设计模式/","link":"","permalink":"https://yangdon.github.io/2017/10/15/JAVA-23种设计模式/","excerpt":"JAVA-23种设计模式转自： http://blog.csdn.net/zhangerqing/article/details/8194653 一、设计模式设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 二、设计模式的分类总体来说设计模式分为三大类： 创建型 模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。 结构型 模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。 行为型 模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。 其实还有两类：并发型 模式和 线程池 模式。用一个图片来整体描述一下：","text":"JAVA-23种设计模式转自： http://blog.csdn.net/zhangerqing/article/details/8194653 一、设计模式设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 二、设计模式的分类总体来说设计模式分为三大类： 创建型 模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。 结构型 模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。 行为型 模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。 其实还有两类：并发型 模式和 线程池 模式。用一个图片来整体描述一下： 三、设计模式的六大原则1.开闭原则（Open Close Principle）开闭原则就是说对 扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个 热插拔 的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2.里氏代换原则（Liskov Substitution Principle）里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是 抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科 3.依赖倒转原则（Dependence Inversion Principle）这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。 4.接口隔离原则（Interface Segregation Principle）这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。 5.迪米特法则（最少知道原则）（Demeter Principle）为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。 6.合成复用原则（Composite Reuse Principle）原则是尽量使用 合成/聚合 的方式，而不是使用继承。","categories":[],"tags":[{"name":"Java，设计模式","slug":"Java，设计模式","permalink":"https://yangdon.github.io/tags/Java，设计模式/"}]},{"title":"JAVA设计模式-单例模式","slug":"JAVA设计模式-单例模式","date":"2017-10-15T06:30:59.000Z","updated":"2017-10-15T08:05:38.756Z","comments":true,"path":"2017/10/15/JAVA设计模式-单例模式/","link":"","permalink":"https://yangdon.github.io/2017/10/15/JAVA设计模式-单例模式/","excerpt":"","text":"JAVA设计模式-单例模式","categories":[],"tags":[{"name":"java,设计模式","slug":"java-设计模式","permalink":"https://yangdon.github.io/tags/java-设计模式/"}]},{"title":"Java1.8新特性--Collectors","slug":"Java1-8新特性-Collectors","date":"2017-10-13T12:05:30.000Z","updated":"2017-11-02T16:32:58.835Z","comments":true,"path":"2017/10/13/Java1-8新特性-Collectors/","link":"","permalink":"https://yangdon.github.io/2017/10/13/Java1-8新特性-Collectors/","excerpt":"Java1.8新特性–Collector转自 http://blog.csdn.net/u013291394/article/details/52662761 12345678java.util.streamInterface Collector&lt;T,A,R&gt;参数类型T - T的输入元素的类型A - A的可变累积类型（通常作为实现细节隐藏）R - R的结果类型 collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。你可以使用collect达到以下目的： 将数据流缩减为一个单一值： 一个流执行后的结果能够被缩减为一个单一的值。单一的值可以是一个Collection，或者像int、double等的数值，再或者是一个用户自定义的值对象。 将一个数据流中的元素进行分组： 根据任务类型将流中所有的任务进行分组。这将产生一个Map","text":"Java1.8新特性–Collector转自 http://blog.csdn.net/u013291394/article/details/52662761 12345678java.util.streamInterface Collector&lt;T,A,R&gt;参数类型T - T的输入元素的类型A - A的可变累积类型（通常作为实现细节隐藏）R - R的结果类型 collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。你可以使用collect达到以下目的： 将数据流缩减为一个单一值： 一个流执行后的结果能够被缩减为一个单一的值。单一的值可以是一个Collection，或者像int、double等的数值，再或者是一个用户自定义的值对象。 将一个数据流中的元素进行分组： 根据任务类型将流中所有的任务进行分组。这将产生一个Map","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://yangdon.github.io/tags/java/"}]},{"title":"Springboot 之 静态资源路径配置","slug":"Springboot-之-静态资源路径配置","date":"2017-10-11T11:30:48.000Z","updated":"2017-10-11T11:49:56.247Z","comments":true,"path":"2017/10/11/Springboot-之-静态资源路径配置/","link":"","permalink":"https://yangdon.github.io/2017/10/11/Springboot-之-静态资源路径配置/","excerpt":"静态资源路径 是指系统可以直接访问的路径，且路径下的所有文件均可被用户直接读取。 在Springboot中默认的静态资源路径有：classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/，从这里可以看出这里的静态资源路径都是在classpath中（也就是在项目路径下指定的这几个文件夹） 试想这样一种情况：一个网站有文件上传文件的功能，如果被上传的文件放在上述的那些文件夹中会有怎样的后果？ 网站数据与程序代码不能有效分离； 当项目被打包成一个.jar文件部署时，再将上传的文件放到这个.jar文件中是有多么低的效率； 网站数据的备份将会很痛苦。 此时可能最佳的解决办法是将静态资源路径设置到磁盘的基本个目录。","text":"静态资源路径 是指系统可以直接访问的路径，且路径下的所有文件均可被用户直接读取。 在Springboot中默认的静态资源路径有：classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/，从这里可以看出这里的静态资源路径都是在classpath中（也就是在项目路径下指定的这几个文件夹） 试想这样一种情况：一个网站有文件上传文件的功能，如果被上传的文件放在上述的那些文件夹中会有怎样的后果？ 网站数据与程序代码不能有效分离； 当项目被打包成一个.jar文件部署时，再将上传的文件放到这个.jar文件中是有多么低的效率； 网站数据的备份将会很痛苦。 此时可能最佳的解决办法是将静态资源路径设置到磁盘的基本个目录。 在Springboot中可以直接在配置文件中覆盖默认的静态资源路径的配置信息： application.yml配置文件如下： 1234567891011server: port=8080web: upload-path: D:/temp/study13/spring: mvc: static-path-pattern: /** resources: static-locations:classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:$&#123;web.upload-path&#125; 注意: web.upload-path这个属于自定义的属性，指定了一个路径，注意要以/结尾； spring.mvc.static-path-pattern=/** 表示所有的访问都经过静态资源路径； spring.resources.static-locations在这里配置静态资源路径，前面说了这里的配置是覆盖默认配置，所以需要将默认的也加上否则static、public等这些路径将不能被当作静态资源路径，在这个最末尾的file:${web.upload-path}之所有要加file:是因为指定的是一个具体的硬盘路径，其他的使用classpath指的是系统环境变量 编写测试类上传文件 12345678910111213141516171819202122232425package com.yangdon;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.util.FileCopyUtils;import java.io.File;@SpringBootTest@RunWith(SpringRunner.class)public class FileTest &#123; @Value(\"$&#123;web.upload-path&#125;\") private String path; /** 文件上传测试 */ @Test public void uploadTest() throws Exception &#123; File f = new File(\"D:/pic.jpg\"); FileCopyUtils.copy(f, new File(path+\"/1.jpg\")); &#125;&#125; 注意： 这里将D:/pic.jpg上传到配置的静态资源路径下，下面再写一个测试方法来遍历此路径下的所有文件。 1234567@Testpublic void listFilesTest() &#123; File file = new File(path); for(File f : file.listFiles()) &#123; System.out.println(\"fileName : \"+f.getName()); &#125;&#125; 可以到得结果： 1fileName : 1.jpg 说明文件已上传成功，静态资源路径也配置成功。 浏览器方式验证 由于前面已经在静态资源路径中上传了一个名为1.jpg的图片，所以可以通过浏览器打开:http://localhost:8080/1.jpg 访问到刚刚上传的图片。","categories":[],"tags":[{"name":"Springboot","slug":"Springboot","permalink":"https://yangdon.github.io/tags/Springboot/"}]},{"title":"shiro--笔记一","slug":"shiro-笔记一","date":"2017-09-22T05:17:00.000Z","updated":"2017-09-22T05:35:09.701Z","comments":true,"path":"2017/09/22/shiro-笔记一/","link":"","permalink":"https://yangdon.github.io/2017/09/22/shiro-笔记一/","excerpt":"","text":"shiro学习笔记一 获取当前Subject 1Subject currentUser = SecurityUtils.getSubject; 使用session，即便是没有在wab环境下也可以使用session 12","categories":[],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://yangdon.github.io/tags/shiro/"}]},{"title":"JAVA--JNI基础","slug":"JAVA-JNI基础","date":"2017-08-08T11:55:51.000Z","updated":"2017-11-02T16:32:40.484Z","comments":true,"path":"2017/08/08/JAVA-JNI基础/","link":"","permalink":"https://yangdon.github.io/2017/08/08/JAVA-JNI基础/","excerpt":"JNI概述JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Java代码与以其他编程语言（如C，C ++和汇编）编写的应用程序和库进行互操作。 JNI最重要的优点是它对基础Java VM的实现没有限制。因此，Java VM供应商可以添加对JNI的支持，而不会影响VM的其他部分。程序员可以编写本地应用程序或库的一个版本，并且它将能够与支持JNI的所有Java VM配合使用。 通过JNI编程，您可以使用本机方法： 创建，检查和更新Java对象（包括数组和字符串）。 调用Java方法。 抓住并抛出异常。 加载类并获取类信息。 执行运行时类型检查。 您还可以使用JNI与Invocation API来启用任意本地应用程序来嵌入Java VM。这使得程序员可以轻松地使其现有应用程序启用Java，而无需与VM源代码链接。","text":"JNI概述JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Java代码与以其他编程语言（如C，C ++和汇编）编写的应用程序和库进行互操作。 JNI最重要的优点是它对基础Java VM的实现没有限制。因此，Java VM供应商可以添加对JNI的支持，而不会影响VM的其他部分。程序员可以编写本地应用程序或库的一个版本，并且它将能够与支持JNI的所有Java VM配合使用。 通过JNI编程，您可以使用本机方法： 创建，检查和更新Java对象（包括数组和字符串）。 调用Java方法。 抓住并抛出异常。 加载类并获取类信息。 执行运行时类型检查。 您还可以使用JNI与Invocation API来启用任意本地应用程序来嵌入Java VM。这使得程序员可以轻松地使其现有应用程序启用Java，而无需与VM源代码链接。 JNI接口指针本地代码(Native code)通过调用JNI函数来访问Java VM功能。JNI函数可通过接口指针获得。接口指针是指向指针的指针。指针指向一个指针数组，每个指针指向一个接口函数。每个接口函数都在数组内的一个预定义的偏移量。 JNI接口指针： 编译加载本地方法(Native methods)被加载通过调用System.loadLibrary方法。例如： 12345678package pkg;class Cls &#123; native double f(int i, String s); static &#123; System.loadLibrary(“pkg_Cls”); &#125;&#125; 注意： System.loadLibrary的参数是由程序员任意选择的库名称。但依据不同的系统必须遵循相应的库名称标准，例如：Unix/Linux系统将pkg_Cl名称转换为libpkg_Cls.so，而Win32系统将相同的pkg_Cls名称转换为pkg_Cls.dll。","categories":[],"tags":[{"name":"jni","slug":"jni","permalink":"https://yangdon.github.io/tags/jni/"}]}]}