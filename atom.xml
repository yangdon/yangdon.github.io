<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YANGDON&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangdon.github.io/"/>
  <updated>2017-08-08T16:31:05.786Z</updated>
  <id>https://yangdon.github.io/</id>
  
  <author>
    <name>Yang Don</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA--JNI基础</title>
    <link href="https://yangdon.github.io/2017/08/08/JAVA-JNI%E5%9F%BA%E7%A1%80/"/>
    <id>https://yangdon.github.io/2017/08/08/JAVA-JNI基础/</id>
    <published>2017-08-08T11:55:51.000Z</published>
    <updated>2017-08-08T16:31:05.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JNI概述"><a href="#JNI概述" class="headerlink" title="JNI概述"></a>JNI概述</h2><p>JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Java代码与以其他编程语言（如C，C ++和汇编）编写的应用程序和库进行互操作。</p>
<p>JNI最重要的优点是它对基础Java VM的实现没有限制。因此，Java VM供应商可以添加对JNI的支持，而不会影响VM的其他部分。程序员可以编写本地应用程序或库的一个版本，并且它将能够与支持JNI的所有Java VM配合使用。</p>
<p>通过JNI编程，您可以使用本机方法：</p>
<ul>
<li>创建，检查和更新Java对象（包括数组和字符串）。</li>
<li>调用Java方法。</li>
<li>抓住并抛出异常。</li>
<li>加载类并获取类信息。</li>
<li>执行运行时类型检查。</li>
</ul>
<p>您还可以使用JNI与Invocation API来启用任意本地应用程序来嵌入Java VM。这使得程序员可以轻松地使其现有应用程序启用Java，而无需与VM源代码链接。</p>
<h2 id="JNI接口指针"><a href="#JNI接口指针" class="headerlink" title="JNI接口指针"></a>JNI接口指针</h2><p>本地代码(Native code)通过调用JNI函数来访问Java VM功能。JNI函数可通过接口指针获得。接口指针是指向指针的指针。指针指向一个指针数组，每个指针指向一个接口函数。每个接口函数都在数组内的一个预定义的偏移量。</p>
<p>JNI接口指针：</p>
<p><img src="http://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/images/designa.gif" alt="Alt text"></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>本地方法(Native methods)被加载通过调用<code>System.loadLibrary</code>方法。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pkg;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, String s)</span></span>;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(“pkg_Cls”);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注意： <code>System.loadLibrary</code>的参数是由程序员任意选择的库名称。但依据不同的系统必须遵循相应的库名称标准，例如：Unix/Linux系统将<code>pkg_Cl</code>名称转换为libpkg_Cls.so，而Win32系统将相同的<code>pkg_Cls</code>名称转换为pkg_Cls.dll。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JNI概述&quot;&gt;&lt;a href=&quot;#JNI概述&quot; class=&quot;headerlink&quot; title=&quot;JNI概述&quot;&gt;&lt;/a&gt;JNI概述&lt;/h2&gt;&lt;p&gt;JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Jav
    
    </summary>
    
    
      <category term="jni" scheme="https://yangdon.github.io/tags/jni/"/>
    
  </entry>
  
</feed>
