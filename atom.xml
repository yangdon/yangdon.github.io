<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YANGDON&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangdon.github.io/"/>
  <updated>2017-11-02T16:33:44.616Z</updated>
  <id>https://yangdon.github.io/</id>
  
  <author>
    <name>Yang Don</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis--redis安装与配置</title>
    <link href="https://yangdon.github.io/2017/11/01/redis-redis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://yangdon.github.io/2017/11/01/redis-redis安装与配置/</id>
    <published>2017-11-01T13:49:42.000Z</published>
    <updated>2017-11-02T16:33:44.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis–redis安装与配置"><a href="#redis–redis安装与配置" class="headerlink" title="redis–redis安装与配置"></a>redis–redis安装与配置</h1><h2 id="一、redis安装"><a href="#一、redis安装" class="headerlink" title="一、redis安装"></a>一、redis安装</h2><p>获取redis最新的安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-x.x.x.tar.gz</div></pre></td></tr></table></figure>
<p>开始安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-x.x.x.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-x.x.x</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>配置redis.config文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/redis</div><div class="line">sudo cp ./redis.config /etc/redis/6379.config</div><div class="line">sudo vim /etc/redis/6379.config</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>6379.config只需作如下内容的修改:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</div><div class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</div><div class="line">daemonize yes                 # 将daemonize属性改为yes（表明需要在后台运行）(136行附近)</div><div class="line"></div><div class="line"># Note that you must specify a directory here, not a file name.</div><div class="line">dir /usr/local/redis/data     # 设置dump.rdb文件的存储路径(263行附近)</div><div class="line"></div><div class="line"># requirepass foobared</div><div class="line">requirepass root123           # 设置redis的密码(500行附近)</div></pre></td></tr></table></figure>
<p>添加dump.rdb文件的存储路径：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /usr/<span class="built_in">local</span>/redis/data</div><div class="line">sudo chmod 766 -R /usr/<span class="built_in">local</span>/redis/</div></pre></td></tr></table></figure>
<p>配置redis的启动参数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-x.x.x</div><div class="line"><span class="built_in">cd</span> utils</div><div class="line">sudo cp ./redis_init_script /etc/init.d/redis_6379</div></pre></td></tr></table></figure>
<p>并对redis_6379文件进行修改，具体内容作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Simple Redis init.d script conceived to work on Linux systems</span></div><div class="line"><span class="comment"># as it does use of the /proc filesystem.</span></div><div class="line"></div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</div><div class="line">CLIEXEC=/usr/<span class="built_in">local</span>/bin/redis-cli</div><div class="line"></div><div class="line">PIDFILE=/var/run/redis_<span class="variable">$&#123;REDISPORT&#125;</span>.pid</div><div class="line">CONF=<span class="string">"/etc/redis/<span class="variable">$&#123;REDISPORT&#125;</span>.conf"</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></div><div class="line">                <span class="variable">$CLIEXEC</span> <span class="_">-a</span> <span class="string">"root123"</span> -p <span class="variable">$REDISPORT</span> shutdown <span class="comment"># 添加'-a "root123"'</span></div><div class="line">                <span class="keyword">while</span> [ -x /proc/<span class="variable">$&#123;PID&#125;</span> ]</div><div class="line">                <span class="keyword">do</span></div><div class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></div><div class="line">                    sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">        <span class="built_in">echo</span> <span class="string">"Please use start or stop as first argument"</span></div><div class="line">        ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<p>至此，redis的安装与配置完成。</p>
<h2 id="二、运行redis-server-后台服务-与redis-cli-客户端"><a href="#二、运行redis-server-后台服务-与redis-cli-客户端" class="headerlink" title="二、运行redis-server(后台服务)与redis-cli(客户端)"></a>二、运行redis-server(后台服务)与redis-cli(客户端)</h2><p>运行redis-server：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service redis_6379 start     <span class="comment"># 启动redis后台服务</span></div><div class="line">sudo service redis_6379 stop      <span class="comment"># 停止redis后台服务</span></div></pre></td></tr></table></figure>
<p>运行redis-cli(客户端):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli <span class="_">-a</span> root123</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-cli</div><div class="line">auth root123</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis–redis安装与配置&quot;&gt;&lt;a href=&quot;#redis–redis安装与配置&quot; class=&quot;headerlink&quot; title=&quot;redis–redis安装与配置&quot;&gt;&lt;/a&gt;redis–redis安装与配置&lt;/h1&gt;&lt;h2 id=&quot;一、redis安装&quot;&gt;&lt;a href=&quot;#一、redis安装&quot; class=&quot;headerlink&quot; title=&quot;一、redis安装&quot;&gt;&lt;/a&gt;一、redis安装&lt;/h2&gt;&lt;p&gt;获取redis最新的安装包：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget http://download.redis.io/releases/redis-x.x.x.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开始安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -zxvf redis-x.x.x.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; redis-x.x.x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置redis.config文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo mkdir /etc/redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo cp ./redis.config /etc/redis/6379.config&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo vim /etc/redis/6379.config&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java--jedis配置</title>
    <link href="https://yangdon.github.io/2017/11/01/java-jedis%E9%85%8D%E7%BD%AE/"/>
    <id>https://yangdon.github.io/2017/11/01/java-jedis配置/</id>
    <published>2017-11-01T13:03:05.000Z</published>
    <updated>2017-11-01T15:28:37.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java–jedis配置"><a href="#java–jedis配置" class="headerlink" title="java–jedis配置"></a>java–jedis配置</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java–jedis配置&quot;&gt;&lt;a href=&quot;#java–jedis配置&quot; class=&quot;headerlink&quot; title=&quot;java–jedis配置&quot;&gt;&lt;/a&gt;java–jedis配置&lt;/h1&gt;
    
    </summary>
    
    
      <category term="java jedis" scheme="https://yangdon.github.io/tags/java-jedis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis--表高级映射</title>
    <link href="https://yangdon.github.io/2017/10/30/mybatis-%E8%A1%A8%E9%AB%98%E7%BA%A7%E6%98%A0%E5%B0%84/"/>
    <id>https://yangdon.github.io/2017/10/30/mybatis-表高级映射/</id>
    <published>2017-10-30T11:51:03.000Z</published>
    <updated>2017-10-31T06:19:07.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis–表高级映射"><a href="#mybatis–表高级映射" class="headerlink" title="mybatis–表高级映射"></a>mybatis–表高级映射</h1><h2 id="一：订单商品数据模型"><a href="#一：订单商品数据模型" class="headerlink" title="一：订单商品数据模型"></a>一：订单商品数据模型</h2><p>1.商品表(items)：id，itemsname(商品名称)，price(商品定价)，detail(商品描述)，pic(商品图片)，createtime(生产日期)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+------------+-------------+--------+-------+-----------+----------------+</div><div class="line">| Field      | Type        | Null   | Key   |   Default | Extra          |</div><div class="line">|------------+-------------+--------+-------+-----------+----------------|</div><div class="line">| id         | int(11)     | NO     | PRI   |    &lt;null&gt; | auto_increment |</div><div class="line">| itemsname  | varchar(32) | NO     |       |    &lt;null&gt; |                |</div><div class="line">| price      | float(10,1) | NO     |       |    &lt;null&gt; |                |</div><div class="line">| detail     | text        | YES    |       |    &lt;null&gt; |                |</div><div class="line">| pic        | varchar(64) | YES    |       |    &lt;null&gt; |                |</div><div class="line">| createtime | datetime    | NO     |       |    &lt;null&gt; |                |</div><div class="line">+------------+-------------+--------+-------+-----------+----------------+</div></pre></td></tr></table></figure></p>
<p>2.用户表(t_user)：id,username(用户名称),birthday(生日),sex(性别),address(地址)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+----------+--------------+--------+-------+-----------+----------------+</div><div class="line">| Field    | Type         | Null   | Key   |   Default | Extra          |</div><div class="line">|----------+--------------+--------+-------+-----------+----------------|</div><div class="line">| id       | int(11)      | NO     | PRI   |    &lt;null&gt; | auto_increment |</div><div class="line">| username | varchar(32)  | NO     |       |    &lt;null&gt; |                |</div><div class="line">| birthday | date         | YES    |       |    &lt;null&gt; |                |</div><div class="line">| sex      | char(1)      | YES    |       |    &lt;null&gt; |                |</div><div class="line">| address  | varchar(256) | YES    |       |    &lt;null&gt; |                |</div><div class="line">+----------+--------------+--------+-------+-----------+----------------+</div></pre></td></tr></table></figure></p>
<p>3.订单表(orders)：id，user_id(下单用户id)，number(订单号)，createtime(创建订单时间)，note(备注)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+------------+--------------+--------+-------+-----------+----------------+</div><div class="line">| Field      | Type         | Null   | Key   |   Default | Extra          |</div><div class="line">|------------+--------------+--------+-------+-----------+----------------|</div><div class="line">| id         | int(11)      | NO     | PRI   |    &lt;null&gt; | auto_increment |</div><div class="line">| user_id    | int(11)      | NO     | MUL   |    &lt;null&gt; |                |</div><div class="line">| number     | varchar(30)  | NO     |       |    &lt;null&gt; |                |</div><div class="line">| createtime | datetime     | NO     |       |    &lt;null&gt; |                |</div><div class="line">| note       | varchar(100) | YES    |       |    &lt;null&gt; |                |</div><div class="line">+------------+--------------+--------+-------+-----------+----------------+</div></pre></td></tr></table></figure></p>
<p>4.订单详情表(orderdetail)：id,orders_id(订单id),items_id(商品id),items_num(商品购买数量)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+-----------+---------+--------+-------+-----------+----------------+</div><div class="line">| Field     | Type    | Null   | Key   |   Default | Extra          |</div><div class="line">|-----------+---------+--------+-------+-----------+----------------|</div><div class="line">| id        | int(11) | NO     | PRI   |    &lt;null&gt; | auto_increment |</div><div class="line">| orders_id | int(11) | NO     | MUL   |    &lt;null&gt; |                |</div><div class="line">| items_id  | int(11) | NO     | MUL   |    &lt;null&gt; |                |</div><div class="line">| items_num | int(11) | YES    |       |    &lt;null&gt; |                |</div><div class="line">+-----------+---------+--------+-------+-----------+----------------+</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis–表高级映射&quot;&gt;&lt;a href=&quot;#mybatis–表高级映射&quot; class=&quot;headerlink&quot; title=&quot;mybatis–表高级映射&quot;&gt;&lt;/a&gt;mybatis–表高级映射&lt;/h1&gt;&lt;h2 id=&quot;一：订单商品数据模型&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
      <category term="mybatis" scheme="https://yangdon.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>redis--基础语法</title>
    <link href="https://yangdon.github.io/2017/10/30/redis-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://yangdon.github.io/2017/10/30/redis-基础语法/</id>
    <published>2017-10-30T02:39:27.000Z</published>
    <updated>2017-10-30T11:48:35.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-基础语法"><a href="#redis-基础语法" class="headerlink" title="redis 基础语法"></a>redis 基础语法</h1><h2 id="redis-键-key"><a href="#redis-键-key" class="headerlink" title="redis 键(key)"></a>redis 键(key)</h2><p>DEL命令用于删除已存在的键。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis-基础语法&quot;&gt;&lt;a href=&quot;#redis-基础语法&quot; class=&quot;headerlink&quot; title=&quot;redis 基础语法&quot;&gt;&lt;/a&gt;redis 基础语法&lt;/h1&gt;&lt;h2 id=&quot;redis-键-key&quot;&gt;&lt;a href=&quot;#redis-键-ke
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端--grunt自动化构建</title>
    <link href="https://yangdon.github.io/2017/10/28/%E5%89%8D%E7%AB%AF-grunt%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    <id>https://yangdon.github.io/2017/10/28/前端-grunt自动化构建/</id>
    <published>2017-10-28T13:07:22.000Z</published>
    <updated>2017-11-02T16:32:04.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GRUNT-–-JavaScript-世界的构建工具"><a href="#GRUNT-–-JavaScript-世界的构建工具" class="headerlink" title="GRUNT – JavaScript 世界的构建工具"></a>GRUNT – JavaScript 世界的构建工具</h1><h2 id="为何要用构建工具？"><a href="#为何要用构建工具？" class="headerlink" title="为何要用构建工具？"></a>为何要用构建工具？</h2><blockquote>
<p>一句话：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。—-grunt官网</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>使用grunt自动构建HTML项目，将stylus转化为浏览器可识别的css代码，并且支持项目的热更新。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.nodejs环境</p>
<p>2.npm管理工具</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mkdir my-project</div><div class="line"><span class="built_in">cd</span>  my-project</div><div class="line"></div><div class="line">npm init</div><div class="line">npm install</div><div class="line">npm install -g grunt-cli</div><div class="line">npm install grunt --save-dev  //安装Grunt最新版本到项目目录中</div><div class="line">npm install grunt-contrib-connect --save-dev  //一个小型的服务器</div><div class="line">npm install grunt-contrib-stylus --save-dev //stylus编写styl输出css</div><div class="line">npm install grunt-contrib-watch --save-dev  //监视文件变动，做出相应动作</div></pre></td></tr></table></figure>
<p>至此，所需依赖安装完毕。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.创建项目结构</p>
<p>在项目根目录创建 <strong>app</strong> 文件夹，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app/</div><div class="line">├── fonts/</div><div class="line">├── images/</div><div class="line">├── index.html</div><div class="line">├── scripts/</div><div class="line">├── style/</div><div class="line">│   └── style.css</div><div class="line">└── stylus/</div><div class="line">    └── example.styl</div></pre></td></tr></table></figure>
<p>2.配置Gruntfile.js文件</p>
<p>在项目根目录创建 <strong>Gruntfile.js</strong> 文件，其配置内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 包装函数</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">  <span class="comment">// 任务配置,所有插件的配置信息</span></div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    <span class="attr">pkg</span>: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">    <span class="attr">connect</span>: &#123;</div><div class="line">      <span class="attr">options</span>: &#123;</div><div class="line">        <span class="attr">port</span>: <span class="number">9000</span>,</div><div class="line">        <span class="attr">hostname</span>: <span class="string">'*'</span>, <span class="comment">//默认就是这个值，可配置为本机某个 IP，localhost 或域名</span></div><div class="line">        livereload: <span class="number">35729</span>  <span class="comment">//声明给 watch 监听的端口</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">server</span>: &#123;</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">//自动打开网页 http://</span></div><div class="line">          base: [</div><div class="line">            <span class="string">'app'</span>  <span class="comment">//主目录</span></div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">stylus</span>:&#123;</div><div class="line">      <span class="attr">compile</span>: &#123;</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">relativeDest</span>: <span class="string">'/'</span>, <span class="comment">//path to be joined and resolved with each file dest to get new one.</span></div><div class="line">          urlfunc: <span class="string">'data-uri'</span>, <span class="comment">// use data-uri('test.png') in our code to trigger Data URI embedding</span></div><div class="line">          linenos: <span class="literal">false</span>,</div><div class="line">          <span class="attr">compress</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">files</span>: &#123;</div><div class="line">          <span class="string">'app/style/style.css'</span>: <span class="string">'app/stylus/*.styl'</span>, <span class="comment">// 1:1 compile</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// watch插件的配置信息</span></div><div class="line">    watch: &#123;</div><div class="line">      <span class="attr">another</span>: &#123;</div><div class="line">        <span class="attr">tasks</span>: [<span class="string">'stylus'</span>],</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">            <span class="attr">livereload</span>: <span class="string">'&lt;%=connect.options.livereload%&gt;'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">files</span>: [  <span class="comment">//下面文件的改变就会实时刷新网页</span></div><div class="line">          <span class="string">'app/*.html'</span>,</div><div class="line">          <span class="string">'app/stylus/&#123;,*/&#125;*.styl'</span>,</div><div class="line">          <span class="string">'app/scripts/&#123;,*/&#125;*.js'</span>,</div><div class="line">          <span class="string">'app/images/&#123;,*/&#125;*.&#123;png,jpg&#125;'</span>,</div><div class="line">          <span class="string">'app/fonts/&#123;,*/&#125;*.*'</span></div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 告诉grunt我们将使用插件</span></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-stylus'</span>);</div><div class="line">  <span class="comment">//建立本地服务器</span></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-connect'</span>);</div><div class="line"></div><div class="line">  grunt.registerTask(<span class="string">'serve'</span>, [</div><div class="line">    <span class="string">'connect:server'</span>,</div><div class="line">    <span class="string">'watch'</span></div><div class="line">  ]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h2><p>在项目根目录输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt serve</div></pre></td></tr></table></figure>
<p>项目成功启动，修改项目文件，浏览器中显示的内容也会随之改变。</p>
<p>在app/stylus/文件夹下的所有*.styl文件的内容都将被编译到app/style/style.css文件中去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GRUNT-–-JavaScript-世界的构建工具&quot;&gt;&lt;a href=&quot;#GRUNT-–-JavaScript-世界的构建工具&quot; class=&quot;headerlink&quot; title=&quot;GRUNT – JavaScript 世界的构建工具&quot;&gt;&lt;/a&gt;GRUNT – JavaScript 世界的构建工具&lt;/h1&gt;&lt;h2 id=&quot;为何要用构建工具？&quot;&gt;&lt;a href=&quot;#为何要用构建工具？&quot; class=&quot;headerlink&quot; title=&quot;为何要用构建工具？&quot;&gt;&lt;/a&gt;为何要用构建工具？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一句话：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。—-grunt官网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h2&gt;&lt;p&gt;使用grunt自动构建HTML项目，将stylus转化为浏览器可识别的css代码，并且支持项目的热更新。&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;1.nodejs环境&lt;/p&gt;
&lt;p&gt;2.npm管理工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://yangdon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式-合成/聚合复用原则</title>
    <link href="https://yangdon.github.io/2017/10/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%90%88%E6%88%90-%E8%81%9A%E5%90%88%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
    <id>https://yangdon.github.io/2017/10/15/JAVA设计模式-合成-聚合复用原则/</id>
    <published>2017-10-15T07:15:39.000Z</published>
    <updated>2017-10-15T08:05:34.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA设计模式-合成-聚合复用原则"><a href="#JAVA设计模式-合成-聚合复用原则" class="headerlink" title="JAVA设计模式-合成/聚合复用原则"></a>JAVA设计模式-合成/聚合复用原则</h1><p>转自：<a href="http://blog.csdn.net/u010832572/article/details/45007933" target="_blank" rel="external">http://blog.csdn.net/u010832572/article/details/45007933</a></p>
<h2 id="一、什么是合成-聚合复用原则？"><a href="#一、什么是合成-聚合复用原则？" class="headerlink" title="一、什么是合成/聚合复用原则？"></a>一、什么是合成/聚合复用原则？</h2><p>合成/聚合复用原则是 <strong>在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分</strong>；新的对象通过向这些对象的 <strong>委派</strong> 达到复用已有功能的目的。</p>
<p>简述为：<strong>要尽量使用合成/聚合，尽量不要使用继承</strong>。</p>
<h2 id="二、合成和聚合的区别；依赖和关联"><a href="#二、合成和聚合的区别；依赖和关联" class="headerlink" title="二、合成和聚合的区别；依赖和关联"></a>二、合成和聚合的区别；依赖和关联</h2><p>合成(Composition)和聚合(Aggregation)都是关联(Association)的特殊种类。用C语言来讲，合成是 <strong>值的聚合</strong>(Aggregation by Value)，聚合是则是 <strong>引用的聚合</strong>(Aggregation by Reference)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA设计模式-合成-聚合复用原则&quot;&gt;&lt;a href=&quot;#JAVA设计模式-合成-聚合复用原则&quot; class=&quot;headerlink&quot; title=&quot;JAVA设计模式-合成/聚合复用原则&quot;&gt;&lt;/a&gt;JAVA设计模式-合成/聚合复用原则&lt;/h1&gt;&lt;p&gt;转自：&lt;a 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA-23种设计模式</title>
    <link href="https://yangdon.github.io/2017/10/15/JAVA-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yangdon.github.io/2017/10/15/JAVA-23种设计模式/</id>
    <published>2017-10-15T06:34:27.000Z</published>
    <updated>2017-11-02T16:42:41.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-23种设计模式"><a href="#JAVA-23种设计模式" class="headerlink" title="JAVA-23种设计模式"></a>JAVA-23种设计模式</h1><p>转自： <a href="http://blog.csdn.net/zhangerqing/article/details/8194653" target="_blank" rel="external">http://blog.csdn.net/zhangerqing/article/details/8194653</a></p>
<h2 id="一、设计模式"><a href="#一、设计模式" class="headerlink" title="一、设计模式"></a>一、设计模式</h2><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p>
<h2 id="二、设计模式的分类"><a href="#二、设计模式的分类" class="headerlink" title="二、设计模式的分类"></a>二、设计模式的分类</h2><p>总体来说设计模式分为三大类：</p>
<p><strong>创建型</strong> 模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p><strong>结构型</strong> 模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p><strong>行为型</strong> 模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>其实还有两类：<strong>并发型</strong> 模式和 <strong>线程池</strong> 模式。用一个图片来整体描述一下：</p>
<a id="more"></a>
<p><img src="./css/images/1354152786_2930.jpg" alt="Alt text"></p>
<h2 id="三、设计模式的六大原则"><a href="#三、设计模式的六大原则" class="headerlink" title="三、设计模式的六大原则"></a>三、设计模式的六大原则</h2><h3 id="1-开闭原则（Open-Close-Principle）"><a href="#1-开闭原则（Open-Close-Principle）" class="headerlink" title="1.开闭原则（Open Close Principle）"></a>1.开闭原则（Open Close Principle）</h3><p>开闭原则就是说对 <strong>扩展开放</strong>，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个 <strong>热插拔</strong> 的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<h3 id="2-里氏代换原则（Liskov-Substitution-Principle）"><a href="#2-里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2.里氏代换原则（Liskov Substitution Principle）"></a>2.里氏代换原则（Liskov Substitution Principle）</h3><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，<strong>任何基类可以出现的地方，子类一定可以出现</strong>。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是 <strong>抽象化</strong>。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>
<h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3.依赖倒转原则（Dependence Inversion Principle）"></a>3.依赖倒转原则（Dependence Inversion Principle）</h3><p>这个是开闭原则的基础，具体内容：<strong>真对接口编程，依赖于抽象而不依赖于具体</strong>。</p>
<h3 id="4-接口隔离原则（Interface-Segregation-Principle）"><a href="#4-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4.接口隔离原则（Interface Segregation Principle）"></a>4.接口隔离原则（Interface Segregation Principle）</h3><p>这个原则的意思是：<strong>使用多个隔离的接口，比使用单个接口要好</strong>。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
<h3 id="5-迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#5-迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="5.迪米特法则（最少知道原则）（Demeter Principle）"></a>5.迪米特法则（最少知道原则）（Demeter Principle）</h3><p>为什么叫最少知道原则，就是说：<strong>一个实体应当尽量少的与其他实体之间发生相互作用</strong>，使得系统功能模块相对独立。</p>
<h3 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6.合成复用原则（Composite Reuse Principle）"></a>6.合成复用原则（Composite Reuse Principle）</h3><p>原则是尽量使用 <strong><a href="https://yangdon.github.io/#" title="合成/聚合">合成/聚合</a></strong> 的方式，而不是使用继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA-23种设计模式&quot;&gt;&lt;a href=&quot;#JAVA-23种设计模式&quot; class=&quot;headerlink&quot; title=&quot;JAVA-23种设计模式&quot;&gt;&lt;/a&gt;JAVA-23种设计模式&lt;/h1&gt;&lt;p&gt;转自： &lt;a href=&quot;http://blog.csdn.net/zhangerqing/article/details/8194653&quot;&gt;http://blog.csdn.net/zhangerqing/article/details/8194653&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、设计模式&quot;&gt;&lt;a href=&quot;#一、设计模式&quot; class=&quot;headerlink&quot; title=&quot;一、设计模式&quot;&gt;&lt;/a&gt;一、设计模式&lt;/h2&gt;&lt;p&gt;设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;
&lt;h2 id=&quot;二、设计模式的分类&quot;&gt;&lt;a href=&quot;#二、设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;二、设计模式的分类&quot;&gt;&lt;/a&gt;二、设计模式的分类&lt;/h2&gt;&lt;p&gt;总体来说设计模式分为三大类：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建型&lt;/strong&gt; 模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结构型&lt;/strong&gt; 模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为型&lt;/strong&gt; 模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。&lt;/p&gt;
&lt;p&gt;其实还有两类：&lt;strong&gt;并发型&lt;/strong&gt; 模式和 &lt;strong&gt;线程池&lt;/strong&gt; 模式。用一个图片来整体描述一下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java，设计模式" scheme="https://yangdon.github.io/tags/Java%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式-单例模式</title>
    <link href="https://yangdon.github.io/2017/10/15/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yangdon.github.io/2017/10/15/JAVA设计模式-单例模式/</id>
    <published>2017-10-15T06:30:59.000Z</published>
    <updated>2017-10-15T08:05:38.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA设计模式-单例模式"><a href="#JAVA设计模式-单例模式" class="headerlink" title="JAVA设计模式-单例模式"></a>JAVA设计模式-单例模式</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA设计模式-单例模式&quot;&gt;&lt;a href=&quot;#JAVA设计模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;JAVA设计模式-单例模式&quot;&gt;&lt;/a&gt;JAVA设计模式-单例模式&lt;/h1&gt;
    
    </summary>
    
    
      <category term="java,设计模式" scheme="https://yangdon.github.io/tags/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java1.8新特性--Collectors</title>
    <link href="https://yangdon.github.io/2017/10/13/Java1-8%E6%96%B0%E7%89%B9%E6%80%A7-Collectors/"/>
    <id>https://yangdon.github.io/2017/10/13/Java1-8新特性-Collectors/</id>
    <published>2017-10-13T12:05:30.000Z</published>
    <updated>2017-11-02T16:32:58.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java1-8新特性–Collector"><a href="#Java1-8新特性–Collector" class="headerlink" title="Java1.8新特性–Collector"></a>Java1.8新特性–Collector</h1><p>转自 <a href="http://blog.csdn.net/u013291394/article/details/52662761" target="_blank" rel="external">http://blog.csdn.net/u013291394/article/details/52662761</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">java.util.stream</div><div class="line"></div><div class="line">Interface Collector&lt;T,A,R&gt;</div><div class="line"></div><div class="line">参数类型</div><div class="line">T - T的输入元素的类型</div><div class="line">A - A的可变累积类型（通常作为实现细节隐藏）</div><div class="line">R - R的结果类型</div></pre></td></tr></table></figure>
<h3 id="collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。"><a href="#collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。" class="headerlink" title="collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。"></a>collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。</h3><p>你可以使用collect达到以下目的：</p>
<p><strong>将数据流缩减为一个单一值：</strong> 一个流执行后的结果能够被缩减为一个单一的值。单一的值可以是一个Collection，或者像int、double等的数值，再或者是一个用户自定义的值对象。</p>
<p><strong>将一个数据流中的元素进行分组：</strong> 根据任务类型将流中所有的任务进行分组。这将产生一个Map<tasktype, list<task="">&gt;的结果，其中每个实体包含一个任务类型以及与它相关的任务。你也可以使用除了列表以外的任何其他的集合。如果你不需要与一任务类型相关的所有的任务，你可以选择产生一个Map<tasktype, task="">。这是一个能够根据任务类型对任务进行分类并获取每类任务中第一个任务的例子。</tasktype,></tasktype,></p>
<p><strong>分割一个流中的元素：</strong> 你可以将一个流分割为两组——比如将任务分割为要做和已经做完的任务。</p>
<a id="more"></a>
<h3 id="Collector实际应用"><a href="#Collector实际应用" class="headerlink" title="Collector实际应用:"></a>Collector实际应用:</h3><p>在Java8中，我们可以通过编写如下的代码达到将任务根据类型分组的目的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;TaskType, List&lt;Task&gt;&gt; groupTasksByType(List&lt;Task&gt; tasks) &#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().collect(Collectors.groupingBy(task -&gt; task.getType()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码使用了定义在辅助类Collectors中的groupingBy收集器。它创建了一个映射，其中TaskType是它的键，而包含了所有拥有相同TaskType的任务的列表是它的值。为了在Java7中达到相同的效果，你需要编写如下的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;Task&gt; tasks = getTasks();</div><div class="line">    Map&lt;TaskType, List&lt;Task&gt;&gt; allTasksByType = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Task task : tasks) &#123;</div><div class="line">        List&lt;Task&gt; existingTasksByType = allTasksByType.get(task.getType());</div><div class="line">        <span class="keyword">if</span> (existingTasksByType == <span class="keyword">null</span>) &#123;</div><div class="line">            List&lt;Task&gt; tasksByType = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            tasksByType.add(task);</div><div class="line">            allTasksByType.put(task.getType(), tasksByType);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            existingTasksByType.add(task);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;TaskType, List&lt;Task&gt;&gt; entry : allTasksByType.entrySet()) &#123;</div><div class="line">        System.out.println(String.format(<span class="string">"%s =&gt;&gt; %s"</span>, entry.getKey(), entry.getValue()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="收集器：常用的规约操作"><a href="#收集器：常用的规约操作" class="headerlink" title="收集器：常用的规约操作"></a>收集器：常用的规约操作</h3><p>Collectors辅助类提供了大量的静态辅助方法来创建收集器为常见的使用场景服务，像将元素收集到一个集合中、分组和分割元素，或者根据不同的标准来概述元素。我们将在这篇博文中涵盖大部分常见的Collector。</p>
<h3 id="缩减为一个值"><a href="#缩减为一个值" class="headerlink" title="缩减为一个值"></a>缩减为一个值</h3><p>收集器可以被用来收集流的输出到一个集合，或者产生一个单一的值。</p>
<h4 id="将数据收集进一个列表"><a href="#将数据收集进一个列表" class="headerlink" title="将数据收集进一个列表:"></a>将数据收集进一个列表:</h4><p>让我们编写我们的第一个测试用例——给定一个任务列表，我们想将他们的标题收集进一个列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example2_ReduceValue</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">allTitles</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tasks.stream().map(Task::getTitle).collect(toList());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>toList收集器使用了列表的add方法来向结果列表中添加元素。toList收集器使用了ArrayList作为列表的实现。</p>
<h4 id="将数据收集进一个集合"><a href="#将数据收集进一个集合" class="headerlink" title="将数据收集进一个集合"></a>将数据收集进一个集合</h4><p>如果我们想要确保返回的标题都是唯一的，并且我们不在乎元素的顺序，那么我们可以使用toSet收集器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toSet;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">uniqueTitles</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().map(Task::getTitle).collect(toSet());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>toSet方法使用了HashSet作为集合的实现来存储结果集。</p>
<h4 id="将数据收集进一个映射"><a href="#将数据收集进一个映射" class="headerlink" title="将数据收集进一个映射"></a>将数据收集进一个映射</h4><p>你可以使用toMap收集器将一个流转换为一个映射。toMap收集器需要两个映射方法来获得映射的键和值。在下面展示的代码中，Task::getTitle是接收一个任务并产生一个只包含该任务标题的键的Function。task -&gt; task是一个用来返回任务本身的lambda表达式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.function.Function.identity;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Task&gt; <span class="title">taskMap</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> tasks.stream().collect(toMap(Task::getTitle, identity()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从一个流中创建映射的代码会在存在重复的键时抛出异常。你将会得到一个类似下面的错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalStateException: Duplicate key Task&#123;title=<span class="string">'Read Version Control with Git book'</span>, type=READING&#125;</div><div class="line">at java.util.stream.Collectors.lambda$throwingMerger$<span class="number">105</span>(Collectors.java:<span class="number">133</span>)</div></pre></td></tr></table></figure>
<p>你可以通过使用toMap方法的另一个变体来处理重复问题，它允许我们指定一个合并方法。这个合并方法允许用户他们指定想如何处理多个值关联到同一个键的冲突。在下面展示的代码中，我们只是使用了新的值，当然你也可以编写一个智能的算法来处理冲突。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Task&gt; <span class="title">taskMap_duplicates</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> tasks.stream().collect(toMap(Task::getTitle, identity(), (t1, t2) -&gt; t2));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以通过使用toMap方法的第三个变体来指定其他的映射实现。这需要你指定将用来存储结果的Map和Supplier。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Task&gt; <span class="title">collectToMap</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().collect(toMap(Task::getTitle, identity(), (t1, t2) -&gt; t2, LinkedHashMap::<span class="keyword">new</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类似于toMap收集器，也有toConcurrentMap收集器，它产生一个ConcurrentMap而不是HashMap。</p>
<h3 id="使用其它的收集器"><a href="#使用其它的收集器" class="headerlink" title="使用其它的收集器"></a>使用其它的收集器</h3><p>像toList和toSet这类特定的收集器不允许你指定内部的列表或者集合实现。当你想要将结果收集到其它类型的集合中时，你可以像下面这样使用toCollection收集器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LinkedHashSet&lt;Task&gt; <span class="title">collectToLinkedHaskSet</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> tasks.stream().collect(toCollection(LinkedHashSet::<span class="keyword">new</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="找到拥有最长标题的任务"><a href="#找到拥有最长标题的任务" class="headerlink" title="找到拥有最长标题的任务"></a>找到拥有最长标题的任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Task <span class="title">taskWithLongestTitle</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().collect(collectingAndThen(maxBy((t1, t2) -&gt; t1.getTitle().length() - t2.getTitle().length()), Optional::get));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="统计标签的总数"><a href="#统计标签的总数" class="headerlink" title="统计标签的总数"></a>统计标签的总数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalTagCount</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().collect(summingInt(task -&gt; task.getTags().size()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="生成任务标题的概述"><a href="#生成任务标题的概述" class="headerlink" title="生成任务标题的概述"></a>生成任务标题的概述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">titleSummary</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.stream().map(Task::getTitle).collect(joining(<span class="string">";"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分类收集器"><a href="#分类收集器" class="headerlink" title="分类收集器"></a>分类收集器</h3><p>收集器最常见的使用场景之一是对元素进行分类。让我来看一下不同的例子来理解我们如何进行分类。</p>
<h4 id="例子1：根据类型对任务分类"><a href="#例子1：根据类型对任务分类" class="headerlink" title="例子1：根据类型对任务分类"></a>例子1：根据类型对任务分类</h4><p>我们看一下下面展示的例子，我们想要根据TaskType来对所有的任务进行分类。我们可以通过使用Collectors辅助类中的groupingBy方法来轻易地进行该项任务。你可以通过使用方法引用和静态导入来使它更加高效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.groupingBy;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;TaskType, List&lt;Task&gt;&gt; groupTasksByType(List&lt;Task&gt; tasks) &#123;</div><div class="line">       <span class="keyword">return</span> tasks.stream().collect(groupingBy(Task::getType));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它将会产生如下的输出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;CODING=[Task&#123;title=<span class="string">'Write a mobile application to store my tasks'</span>, type=CODING, createdOn=<span class="number">2015</span>-<span class="number">07</span>-<span class="number">03</span>&#125;], WRITING=[Task&#123;title=<span class="string">'Write a blog on Java 8 Streams'</span>, type=WRITING, createdOn=<span class="number">2015</span>-<span class="number">07</span>-<span class="number">04</span>&#125;], READING=[Task&#123;title=<span class="string">'Read Version Control with Git book'</span>, type=READING, createdOn=<span class="number">2015</span>-<span class="number">07</span>-<span class="number">01</span>&#125;, Task&#123;title=<span class="string">'Read Java 8 Lambdas book'</span>, type=READING, createdOn=<span class="number">2015</span>-<span class="number">07</span>-<span class="number">02</span>&#125;, Task&#123;title=<span class="string">'Read Domain Driven Design book'</span>, type=READING, createdOn=<span class="number">2015</span>-<span class="number">07</span>-<span class="number">05</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<h4 id="例子2：根据标签分类"><a href="#例子2：根据标签分类" class="headerlink" title="例子2：根据标签分类"></a>例子2：根据标签分类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;Task&gt;&gt; groupingByTag(List&lt;Task&gt; tasks) &#123;</div><div class="line">        <span class="keyword">return</span> tasks.stream().</div><div class="line">                        flatMap(task -&gt; task.getTags().stream().map(tag -&gt; <span class="keyword">new</span> TaskTag(tag, task))).</div><div class="line">                        collect(groupingBy(TaskTag::getTag, mapping(TaskTag::getTask,toList())));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTag</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String tag;</div><div class="line">    <span class="keyword">final</span> Task task;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskTag</span><span class="params">(String tag, Task task)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tag = tag;</div><div class="line">        <span class="keyword">this</span>.task = task;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> task;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="例子3：根据标签和数量对任务分类"><a href="#例子3：根据标签和数量对任务分类" class="headerlink" title="例子3：根据标签和数量对任务分类"></a>例子3：根据标签和数量对任务分类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Long&gt; <span class="title">tagsAndCount</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tasks.stream().</div><div class="line">        flatMap(task -&gt; task.getTags().stream().map(tag -&gt; <span class="keyword">new</span> TaskTag(tag, task))).</div><div class="line">        collect(groupingBy(TaskTag::getTag, counting()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例子4：根据任务类型和创建日期分类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;TaskType, Map&lt;LocalDate, List&lt;Task&gt;&gt;&gt; groupTasksByTypeAndCreationDate(List&lt;Task&gt; tasks) &#123;</div><div class="line">        <span class="keyword">return</span> tasks.stream().collect(groupingBy(Task::getType, groupingBy(Task::getCreatedOn)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>很多时候你想根据一个断言来将一个数据集分割成两个数据集。举例来说，我们可以通过定义一个将任务分割为两组的分割方法来将任务分割成两组，一组是在今天之前已经到期的，另一组是其他的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Boolean, List&lt;Task&gt;&gt; partitionOldAndFutureTasks(List&lt;Task&gt; tasks) &#123;</div><div class="line">  <span class="keyword">return</span> tasks.stream().collect(partitioningBy(task -&gt; task.getDueOn().isAfter(LocalDate.now())));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成统计信息"><a href="#生成统计信息" class="headerlink" title="生成统计信息"></a>生成统计信息</h3><p>另一组非常有用的收集器是用来产生统计信息的收集器。这能够在像int、double和long这样的原始数据类型上起到作用；并且能被用来生成像下面这样的统计信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics summaryStatistics = tasks.stream().map(Task::getTitle).collect(summarizingInt(String::length));</div><div class="line">System.out.println(summaryStatistics.getAverage()); <span class="comment">//32.4</span></div><div class="line">System.out.println(summaryStatistics.getCount()); <span class="comment">//5</span></div><div class="line">System.out.println(summaryStatistics.getMax()); <span class="comment">//44</span></div><div class="line">System.out.println(summaryStatistics.getMin()); <span class="comment">//24</span></div><div class="line">System.out.println(summaryStatistics.getSum()); <span class="comment">//162</span></div></pre></td></tr></table></figure>
<p>也有其它的变种形式，像针对其它原生类型的LongSummaryStatistics和DoubleSummaryStatistics。</p>
<p>你也可以通过使用combine操作来将一个IntSummaryStatistics与另一个组合起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firstSummaryStatistics.combine(secondSummaryStatistics);</div><div class="line">System.out.println(firstSummaryStatistics)</div></pre></td></tr></table></figure>
<h3 id="连接所有的标题"><a href="#连接所有的标题" class="headerlink" title="连接所有的标题"></a>连接所有的标题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">allTitles</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> tasks.stream().map(Task::getTitle).collect(joining(<span class="string">", "</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编写一个定制的收集器"><a href="#编写一个定制的收集器" class="headerlink" title="编写一个定制的收集器"></a>编写一个定制的收集器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.common.collect.HashMultiset;</div><div class="line"><span class="keyword">import</span> com.google.common.collect.Multiset;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.EnumSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</div><div class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</div><div class="line"><span class="keyword">import</span> java.util.function.Function;</div><div class="line"><span class="keyword">import</span> java.util.function.Supplier;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultisetCollector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">Multiset</span>&lt;<span class="title">T</span>&gt;, <span class="title">Multiset</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;Multiset&lt;T&gt;&gt; supplier() &#123;</div><div class="line">        <span class="keyword">return</span> HashMultiset::create;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BiConsumer&lt;Multiset&lt;T&gt;, T&gt; accumulator() &#123;</div><div class="line">        <span class="keyword">return</span> (set, e) -&gt; set.add(e, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BinaryOperator&lt;Multiset&lt;T&gt;&gt; combiner() &#123;</div><div class="line">        <span class="keyword">return</span> (set1, set2) -&gt; &#123;</div><div class="line">            set1.addAll(set2);</div><div class="line">            <span class="keyword">return</span> set1;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Function&lt;Multiset&lt;T&gt;, Multiset&lt;T&gt;&gt; finisher() &#123;</div><div class="line">        <span class="keyword">return</span> Function.identity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.common.collect.Multiset;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultisetCollectorExample</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">"shekhar"</span>, <span class="string">"rahul"</span>, <span class="string">"shekhar"</span>);</div><div class="line">        Multiset&lt;String&gt; set = names.stream().collect(<span class="keyword">new</span> MultisetCollector&lt;&gt;());</div><div class="line"></div><div class="line">        set.forEach(str -&gt; System.out.println(str + <span class="string">":"</span> + set.count(str)));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java8中的字数统计"><a href="#Java8中的字数统计" class="headerlink" title="Java8中的字数统计"></a>Java8中的字数统计</h3><p>我们将通过使用流和收集器在Java8中编写有名的字数统计样例来结束这一节。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wordCount</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Map&lt;String, Long&gt; wordCount = Files.lines(path)</div><div class="line">            .parallel()</div><div class="line">            .flatMap(line -&gt; Arrays.stream(line.trim().split(<span class="string">"\\s"</span>)))</div><div class="line">            .map(word -&gt; word.replaceAll(<span class="string">"[^a-zA-Z]"</span>, <span class="string">""</span>).toLowerCase().trim())</div><div class="line">            .filter(word -&gt; word.length() &gt; <span class="number">0</span>)</div><div class="line">            .map(word -&gt; <span class="keyword">new</span> SimpleEntry&lt;&gt;(word, <span class="number">1</span>))</div><div class="line">            .collect(groupingBy(SimpleEntry::getKey, counting()));</div><div class="line">    wordCount.forEach((k, v) -&gt; System.out.println(String.format(<span class="string">"%s ==&gt;&gt; %d"</span>, k, v)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java1-8新特性–Collector&quot;&gt;&lt;a href=&quot;#Java1-8新特性–Collector&quot; class=&quot;headerlink&quot; title=&quot;Java1.8新特性–Collector&quot;&gt;&lt;/a&gt;Java1.8新特性–Collector&lt;/h1&gt;&lt;p&gt;转自 &lt;a href=&quot;http://blog.csdn.net/u013291394/article/details/52662761&quot;&gt;http://blog.csdn.net/u013291394/article/details/52662761&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;java.util.stream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Interface Collector&amp;lt;T,A,R&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;参数类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;T - T的输入元素的类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A - A的可变累积类型（通常作为实现细节隐藏）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;R - R的结果类型&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。&quot;&gt;&lt;a href=&quot;#collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。&quot; class=&quot;headerlink&quot; title=&quot;collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。&quot;&gt;&lt;/a&gt;collect是一个将数据流缩减为一个值的归约操作。这个值可以是集合、映射，或者一个值对象。&lt;/h3&gt;&lt;p&gt;你可以使用collect达到以下目的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将数据流缩减为一个单一值：&lt;/strong&gt; 一个流执行后的结果能够被缩减为一个单一的值。单一的值可以是一个Collection，或者像int、double等的数值，再或者是一个用户自定义的值对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将一个数据流中的元素进行分组：&lt;/strong&gt; 根据任务类型将流中所有的任务进行分组。这将产生一个Map&lt;TaskType, List&lt;Task&gt;&amp;gt;的结果，其中每个实体包含一个任务类型以及与它相关的任务。你也可以使用除了列表以外的任何其他的集合。如果你不需要与一任务类型相关的所有的任务，你可以选择产生一个Map&lt;TaskType, Task&gt;。这是一个能够根据任务类型对任务进行分类并获取每类任务中第一个任务的例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分割一个流中的元素：&lt;/strong&gt; 你可以将一个流分割为两组——比如将任务分割为要做和已经做完的任务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://yangdon.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 之 静态资源路径配置</title>
    <link href="https://yangdon.github.io/2017/10/11/Springboot-%E4%B9%8B-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://yangdon.github.io/2017/10/11/Springboot-之-静态资源路径配置/</id>
    <published>2017-10-11T11:30:48.000Z</published>
    <updated>2017-10-11T11:49:56.247Z</updated>
    
    <content type="html"><![CDATA[<p><strong>静态资源路径</strong> 是指系统可以直接访问的路径，且路径下的所有文件均可被用户直接读取。</p>
<p>在Springboot中默认的静态资源路径有：classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/，从这里可以看出这里的静态资源路径都是在classpath中（也就是在项目路径下指定的这几个文件夹）</p>
<p>试想这样一种情况：一个网站有文件上传文件的功能，如果被上传的文件放在上述的那些文件夹中会有怎样的后果？</p>
<ul>
<li>网站数据与程序代码不能有效分离；</li>
<li>当项目被打包成一个.jar文件部署时，再将上传的文件放到这个.jar文件中是有多么低的效率；</li>
<li>网站数据的备份将会很痛苦。</li>
</ul>
<p>此时可能最佳的解决办法是将静态资源路径设置到磁盘的基本个目录。</p>
<a id="more"></a>
<p>在Springboot中可以直接在配置文件中覆盖默认的静态资源路径的配置信息：</p>
<ul>
<li>application.yml配置文件如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port=8080</div><div class="line"></div><div class="line">web:</div><div class="line">  upload-path: D:/temp/study13/</div><div class="line"></div><div class="line">spring:</div><div class="line">  mvc:</div><div class="line">    static-path-pattern: /**</div><div class="line">    resources:</div><div class="line">      static-locations:classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:$&#123;web.upload-path&#125;</div></pre></td></tr></table></figure>
<p><strong>注意:</strong> web.upload-path这个属于自定义的属性，指定了一个路径，注意要以/结尾；</p>
<p>spring.mvc.static-path-pattern=/** 表示所有的访问都经过静态资源路径；</p>
<p>spring.resources.static-locations在这里配置静态资源路径，前面说了这里的配置是覆盖默认配置，所以需要将默认的也加上否则static、public等这些路径将不能被当作静态资源路径，在这个最末尾的file:${web.upload-path}之所有要加file:是因为指定的是一个具体的硬盘路径，其他的使用classpath指的是系统环境变量</p>
<ul>
<li>编写测试类上传文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yangdon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;web.upload-path&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line"></div><div class="line">    <span class="comment">/** 文件上传测试 */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        File f = <span class="keyword">new</span> File(<span class="string">"D:/pic.jpg"</span>);</div><div class="line">        FileCopyUtils.copy(f, <span class="keyword">new</span> File(path+<span class="string">"/1.jpg"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 这里将D:/pic.jpg上传到配置的静态资源路径下，下面再写一个测试方法来遍历此路径下的所有文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFilesTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line">    <span class="keyword">for</span>(File f : file.listFiles()) &#123;</div><div class="line">        System.out.println(<span class="string">"fileName : "</span>+f.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以到得结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fileName : 1.jpg</div></pre></td></tr></table></figure>
<p>说明文件已上传成功，静态资源路径也配置成功。</p>
<ul>
<li>浏览器方式验证</li>
</ul>
<p>由于前面已经在静态资源路径中上传了一个名为1.jpg的图片，所以可以通过浏览器打开:<a href="http://localhost:8080/1.jpg" target="_blank" rel="external">http://localhost:8080/1.jpg</a> 访问到刚刚上传的图片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;静态资源路径&lt;/strong&gt; 是指系统可以直接访问的路径，且路径下的所有文件均可被用户直接读取。&lt;/p&gt;
&lt;p&gt;在Springboot中默认的静态资源路径有：classpath:/META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/，从这里可以看出这里的静态资源路径都是在classpath中（也就是在项目路径下指定的这几个文件夹）&lt;/p&gt;
&lt;p&gt;试想这样一种情况：一个网站有文件上传文件的功能，如果被上传的文件放在上述的那些文件夹中会有怎样的后果？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站数据与程序代码不能有效分离；&lt;/li&gt;
&lt;li&gt;当项目被打包成一个.jar文件部署时，再将上传的文件放到这个.jar文件中是有多么低的效率；&lt;/li&gt;
&lt;li&gt;网站数据的备份将会很痛苦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时可能最佳的解决办法是将静态资源路径设置到磁盘的基本个目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Springboot" scheme="https://yangdon.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>shiro--笔记一</title>
    <link href="https://yangdon.github.io/2017/09/22/shiro-%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://yangdon.github.io/2017/09/22/shiro-笔记一/</id>
    <published>2017-09-22T05:17:00.000Z</published>
    <updated>2017-09-22T05:35:09.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shiro学习笔记一"><a href="#shiro学习笔记一" class="headerlink" title="shiro学习笔记一"></a>shiro学习笔记一</h1><ol>
<li>获取当前Subject</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Subject currentUser = SecurityUtils.getSubject;</div></pre></td></tr></table></figure>
<ol>
<li>使用session，即便是没有在wab环境下也可以使用session</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;shiro学习笔记一&quot;&gt;&lt;a href=&quot;#shiro学习笔记一&quot; class=&quot;headerlink&quot; title=&quot;shiro学习笔记一&quot;&gt;&lt;/a&gt;shiro学习笔记一&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取当前Subject&lt;/li&gt;
&lt;/ol&gt;
&lt;figure c
    
    </summary>
    
    
      <category term="shiro" scheme="https://yangdon.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>JAVA--JNI基础</title>
    <link href="https://yangdon.github.io/2017/08/08/JAVA-JNI%E5%9F%BA%E7%A1%80/"/>
    <id>https://yangdon.github.io/2017/08/08/JAVA-JNI基础/</id>
    <published>2017-08-08T11:55:51.000Z</published>
    <updated>2017-11-02T16:32:40.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JNI概述"><a href="#JNI概述" class="headerlink" title="JNI概述"></a>JNI概述</h2><p>JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Java代码与以其他编程语言（如C，C ++和汇编）编写的应用程序和库进行互操作。</p>
<p>JNI最重要的优点是它对基础Java VM的实现没有限制。因此，Java VM供应商可以添加对JNI的支持，而不会影响VM的其他部分。程序员可以编写本地应用程序或库的一个版本，并且它将能够与支持JNI的所有Java VM配合使用。</p>
<p>通过JNI编程，您可以使用本机方法：</p>
<ul>
<li>创建，检查和更新Java对象（包括数组和字符串）。</li>
<li>调用Java方法。</li>
<li>抓住并抛出异常。</li>
<li>加载类并获取类信息。</li>
<li>执行运行时类型检查。</li>
</ul>
<p>您还可以使用JNI与Invocation API来启用任意本地应用程序来嵌入Java VM。这使得程序员可以轻松地使其现有应用程序启用Java，而无需与VM源代码链接。</p>
<a id="more"></a>
<h2 id="JNI接口指针"><a href="#JNI接口指针" class="headerlink" title="JNI接口指针"></a>JNI接口指针</h2><p>本地代码(Native code)通过调用JNI函数来访问Java VM功能。JNI函数可通过接口指针获得。接口指针是指向指针的指针。指针指向一个指针数组，每个指针指向一个接口函数。每个接口函数都在数组内的一个预定义的偏移量。</p>
<p>JNI接口指针：</p>
<p><img src="http://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/images/designa.gif" alt="Alt text"></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>本地方法(Native methods)被加载通过调用<code>System.loadLibrary</code>方法。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pkg;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, String s)</span></span>;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(“pkg_Cls”);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注意： <code>System.loadLibrary</code>的参数是由程序员任意选择的库名称。但依据不同的系统必须遵循相应的库名称标准，例如：Unix/Linux系统将<code>pkg_Cl</code>名称转换为libpkg_Cls.so，而Win32系统将相同的<code>pkg_Cls</code>名称转换为pkg_Cls.dll。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JNI概述&quot;&gt;&lt;a href=&quot;#JNI概述&quot; class=&quot;headerlink&quot; title=&quot;JNI概述&quot;&gt;&lt;/a&gt;JNI概述&lt;/h2&gt;&lt;p&gt;JNI(Java Native Interface)是一个本地编程接口。它允许在Java虚拟机（VM）中运行的Java代码与以其他编程语言（如C，C ++和汇编）编写的应用程序和库进行互操作。&lt;/p&gt;
&lt;p&gt;JNI最重要的优点是它对基础Java VM的实现没有限制。因此，Java VM供应商可以添加对JNI的支持，而不会影响VM的其他部分。程序员可以编写本地应用程序或库的一个版本，并且它将能够与支持JNI的所有Java VM配合使用。&lt;/p&gt;
&lt;p&gt;通过JNI编程，您可以使用本机方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建，检查和更新Java对象（包括数组和字符串）。&lt;/li&gt;
&lt;li&gt;调用Java方法。&lt;/li&gt;
&lt;li&gt;抓住并抛出异常。&lt;/li&gt;
&lt;li&gt;加载类并获取类信息。&lt;/li&gt;
&lt;li&gt;执行运行时类型检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您还可以使用JNI与Invocation API来启用任意本地应用程序来嵌入Java VM。这使得程序员可以轻松地使其现有应用程序启用Java，而无需与VM源代码链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jni" scheme="https://yangdon.github.io/tags/jni/"/>
    
  </entry>
  
</feed>
